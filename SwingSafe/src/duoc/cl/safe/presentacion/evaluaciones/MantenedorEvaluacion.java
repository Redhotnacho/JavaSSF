/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package duoc.cl.safe.presentacion.evaluaciones;

import duoc.cl.safe.entity.SsfEmpresa;
import duoc.cl.safe.entity.SsfEvaluaciontipo;
import duoc.cl.safe.entity.SsfEvaluacion;
import duoc.cl.safe.entity.SsfEvaluacionestado;
import duoc.cl.safe.negocio.SsfEmpresaBO;
import duoc.cl.safe.negocio.SsfEvaluaciontipoBO;
import duoc.cl.safe.negocio.SsfEvaluacionBO;
import duoc.cl.safe.negocio.SsfEvaluacionestadoBO;
import duoc.cl.safe.presentacion.usuarios.MantenedorPersona;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nacho
 */
public class MantenedorEvaluacion extends javax.swing.JFrame {

    /**
     * Creates new form MantenedorEvaluación
     */
    public MantenedorEvaluacion() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfEvaluacion = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEvaluacion = new javax.swing.JTable();
        lExito = new javax.swing.JLabel();
        lError = new javax.swing.JLabel();
        tbEstado = new javax.swing.JToggleButton();
        bModificar = new javax.swing.JButton();
        bAgregar = new javax.swing.JButton();
        bLimpiar = new javax.swing.JButton();
        cbTipoEval = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        tfFecha = new javax.swing.JTextField();
        cbEstadoEval = new javax.swing.JComboBox<>();
        cbEmpresa = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Evaluación:");

        jLabel2.setText("Fecha:");

        tblEvaluacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Evaluación", "Fecha", "Empresa", "Estado Evaluación", "Tipo Evaluación", "Fecha Creación", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Short.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEvaluacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEvaluacionMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblEvaluacion);

        lExito.setForeground(new java.awt.Color(0, 204, 51));

        lError.setForeground(new java.awt.Color(255, 0, 0));

        tbEstado.setText("Activo");
        tbEstado.setEnabled(false);
        tbEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbEstadoActionPerformed(evt);
            }
        });

        bModificar.setText("Modificar");
        bModificar.setEnabled(false);
        bModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bModificarActionPerformed(evt);
            }
        });

        bAgregar.setText("Agregar");
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });

        bLimpiar.setText("Limpiar");
        bLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpiarActionPerformed(evt);
            }
        });

        cbTipoEval.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Seleccione Tipo Evaluación -" }));

        jLabel3.setText("Tipo Evaluación:");

        tfFecha.setText("DD-MM-AAAA");

        cbEstadoEval.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Seleccione Estado Evaluación -" }));

        cbEmpresa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Seleccione Empresa -" }));

        jLabel4.setText("Estado Evaluación:");

        jLabel5.setText("Empresa:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lExito, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lError, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(tfEvaluacion, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                                            .addComponent(tfFecha)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cbEmpresa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbEstadoEval, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbTipoEval, 0, 208, Short.MAX_VALUE))))
                                .addGap(39, 39, 39)
                                .addComponent(bAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bLimpiar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 80, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTipoEval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbEstadoEval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bAgregar)
                        .addComponent(bLimpiar)
                        .addComponent(bModificar)
                        .addComponent(tbEstado))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfEvaluacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lExito, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        cargaTabla();
        cargaEvaluacionTipo();
        cargaEmpresa();
        cargaEvaluacionEstado();
    }//GEN-LAST:event_formWindowOpened

    private void tblEvaluacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEvaluacionMouseClicked
        limpiarMsgs();
        tbEstado.setEnabled(true);
        bModificar.setEnabled(true);
        DefaultTableModel model = (DefaultTableModel) tblEvaluacion.getModel();
        if (Integer.parseInt(model.getValueAt(tblEvaluacion.getSelectedRow(), 7).toString()) == 1) {
            tbEstado.setSelected(false);
            activarEstado();
        } else {
            tbEstado.setSelected(true);
            desactivarEstado();
        }
        if (model.getValueAt(tblEvaluacion.getSelectedRow(), 1) != null) {
            tfEvaluacion.setText(model.getValueAt(tblEvaluacion.getSelectedRow(), 1).toString());
        } else {
            tfEvaluacion.setText("");
        }
        if (model.getValueAt(tblEvaluacion.getSelectedRow(), 2) != null) {
            tfFecha.setText(model.getValueAt(tblEvaluacion.getSelectedRow(), 2).toString());
        } else {
            tfFecha.setText("");
        }
        if (model.getValueAt(tblEvaluacion.getSelectedRow(), 3) != null) {
            cbEmpresa.setSelectedItem(model.getValueAt(tblEvaluacion.getSelectedRow(), 3).toString());
        } else {
            cbEmpresa.setSelectedIndex(0);
        }
        if (model.getValueAt(tblEvaluacion.getSelectedRow(), 4) != null) {
            cbEstadoEval.setSelectedItem(model.getValueAt(tblEvaluacion.getSelectedRow(), 4).toString());
        } else {
            cbEstadoEval.setSelectedIndex(0);
        }
        if (model.getValueAt(tblEvaluacion.getSelectedRow(), 5) != null) {
            cbTipoEval.setSelectedItem(model.getValueAt(tblEvaluacion.getSelectedRow(), 5).toString());
        } else {
            cbTipoEval.setSelectedIndex(0);
        }
    }//GEN-LAST:event_tblEvaluacionMouseClicked

    private void bLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpiarActionPerformed
        tbEstado.setEnabled(false);
        bModificar.setEnabled(false);
        limpiarMsgs();
        tblEvaluacion.clearSelection();
        tfEvaluacion.setText("");
        tfFecha.setText("DD-MM-AAAA");
        cbTipoEval.setSelectedIndex(0);
        cbEstadoEval.setSelectedIndex(0);
        cbEmpresa.setSelectedIndex(0);
    }//GEN-LAST:event_bLimpiarActionPerformed

    private void tbEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbEstadoActionPerformed
        limpiarMsgs();
        DefaultTableModel model = (DefaultTableModel) tblEvaluacion.getModel();
        ebo = new SsfEvaluacionBO();

        if (tblEvaluacion.getSelectedRow() == -1) {
            tbEstado.setEnabled(false);
            if (tblEvaluacion.getRowCount() == 0) {
                lError.setText("Tabla vacía");
            } else {
                lError.setText("No hay fila seleccionada");
            }
        } else {
            int id = Short.parseShort(model.getValueAt(tblEvaluacion.getSelectedRow(), 0).toString());
            if (!tbEstado.isSelected()) {
                if (ebo.activarSP(id)) {
                    activarEstado();
                    model.setValueAt("1", tblEvaluacion.getSelectedRow(), 7);
                }
            } else {
                if (ebo.desactivarSP(id)) {
                    desactivarEstado();
                    model.setValueAt("0", tblEvaluacion.getSelectedRow(), 7);
                }
            }
        }
    }//GEN-LAST:event_tbEstadoActionPerformed

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        ebo = new SsfEvaluacionBO();
        limpiarMsgs();
        if (tfEvaluacion.getText().trim().equals("")) {
            lError.setText("Nombre Evaluación no puede quedar en blanco");
        } else if (cbTipoEval.getSelectedIndex() == 0) {
            lError.setText("Seleccione un tipo evaluación");
        } else if (cbEstadoEval.getSelectedIndex() == 0) {
            lError.setText("Seleccione un estado evaluación");
        } else {
            String sfech, nom, idtipoeval, idestadoeval, idempresa;
            Date fecha = null;
            nom = tfEvaluacion.getText();
            sfech = tfFecha.getText();
            idtipoeval = mapte.get(cbTipoEval.getSelectedItem()).toString();
            idestadoeval = mapee.get(cbEstadoEval.getSelectedItem()).toString();
            idempresa = mape.get(cbEmpresa.getSelectedItem()).toString();
            SsfEvaluacion e = new SsfEvaluacion();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            try {
                if (!sfech.equals("") && !sfech.toLowerCase().equals("DD-MM-AAAA".toLowerCase())) {
                    if (sfech.length() < 10) {
                        sdf = new SimpleDateFormat("dd-MM-yy");
                        fecha = sdf.parse(sfech);
                    }
                    fecha = sdf.parse(sfech);
                    e.setFecha(fecha);
                }
            } catch (ParseException ex) {
                Logger.getLogger(MantenedorEvaluacion.class.getName()).log(Level.SEVERE, null, ex);
                log.log(Level.SEVERE, "Error en formato de fecha", ex);
                //sfech = "error";
                lError.setText("Error en formato de fecha");
            }
            e.setNombre(nom);
            e.setIdEvaluaciontipo(new SsfEvaluaciontipo(BigDecimal.valueOf((long) Long.valueOf(idtipoeval))));
            e.setIdEvaluacionestado(new SsfEvaluacionestado(BigDecimal.valueOf((long) Long.valueOf(idestadoeval))));
            e.setIdEmpresa(new SsfEmpresa(BigDecimal.valueOf((long) Long.valueOf(idempresa))));
            if (ebo.addSP(e)) {
                lExito.setText("Evaluación agregada exitosamente.");
                cargaTabla();
            } else {
                lError.setText("No se pudo agregar");
            }
        }
    }//GEN-LAST:event_bAgregarActionPerformed

    private void bModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bModificarActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblEvaluacion.getModel();
        ebo = new SsfEvaluacionBO();
        limpiarMsgs();
        if (tblEvaluacion.getSelectedRow() == -1) {
            tbEstado.setEnabled(false);
            if (tblEvaluacion.getRowCount() == 0) {
                lError.setText("Tabla vacía");
            } else {
                lError.setText("No hay fila seleccionada");
            }
        } else {
            if (tfEvaluacion.getText().trim().equals("")) {
                lError.setText("Nombre Evaluación no puede quedar en blanco");
            } else if (cbTipoEval.getSelectedIndex() == 0) {
                lError.setText("Seleccione un tipo evaluación");
            } else if (cbEstadoEval.getSelectedIndex() == 0) {
                lError.setText("Seleccione un estado evaluación");
            } else {
                String sfech, nom, id, idtipoeval, idestadoeval, idempresa;
                id = model.getValueAt(tblEvaluacion.getSelectedRow(), 0).toString();
                nom = tfEvaluacion.getText().trim();
                sfech = tfFecha.getText().trim();
                idtipoeval = mapte.get(cbTipoEval.getSelectedItem()).toString();
                idestadoeval = mapee.get(cbEstadoEval.getSelectedItem()).toString();
                idempresa = mape.get(cbEmpresa.getSelectedItem()).toString();
                SsfEvaluacion e = new SsfEvaluacion();
                Date fecha = null;
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                try {
                    if (!sfech.equals("") && !sfech.toLowerCase().equals("DD-MM-AAAA".toLowerCase())) {
                        if (sfech.length() < 10) {
                            sdf = new SimpleDateFormat("dd-MM-yy");
                            fecha = sdf.parse(sfech);
                        }
                        fecha = sdf.parse(sfech);
                        e.setFecha(fecha);
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(MantenedorEvaluacion.class.getName()).log(Level.SEVERE, null, ex);
                    log.log(Level.SEVERE, "Error en formato de fecha", ex);
                    sfech = "error";
                    lError.setText("Error en formato de fecha");
                }
                e.setId(BigDecimal.valueOf(Long.valueOf(id)));
                e.setNombre(nom);
                e.setIdEvaluaciontipo(new SsfEvaluaciontipo(BigDecimal.valueOf((long) Long.valueOf(idtipoeval))));
                e.setIdEvaluacionestado(new SsfEvaluacionestado(BigDecimal.valueOf((long) Long.valueOf(idestadoeval))));
                e.setIdEmpresa(new SsfEmpresa(BigDecimal.valueOf((long) Long.valueOf(idempresa))));
                if (ebo.updateSP(e)) {
                    lExito.setText("Evaluación modificada exitosamente.");
                    // método cargaTabla() no actualiza la tabla por motivos desconocidos
                    model.setValueAt(nom, tblEvaluacion.getSelectedRow(), 1);
                    model.setValueAt(cbEmpresa.getSelectedItem(), tblEvaluacion.getSelectedRow(), 3);
                    model.setValueAt(cbEstadoEval.getSelectedItem(), tblEvaluacion.getSelectedRow(), 4);
                    model.setValueAt(cbTipoEval.getSelectedItem(), tblEvaluacion.getSelectedRow(), 5);
                    if (!sfech.equals("error")) {
                        sdf = new SimpleDateFormat("dd-MM-yyyy");
                        model.setValueAt(sdf.format(fecha), tblEvaluacion.getSelectedRow(), 2);
                    }
                } else {
                    lError.setText("No se pudo modificar");
                }
            }
        }
    }//GEN-LAST:event_bModificarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenedorEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenedorEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenedorEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenedorEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MantenedorEvaluacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAgregar;
    private javax.swing.JButton bLimpiar;
    private javax.swing.JButton bModificar;
    private javax.swing.JComboBox<String> cbEmpresa;
    private javax.swing.JComboBox<String> cbEstadoEval;
    private javax.swing.JComboBox<String> cbTipoEval;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lError;
    private javax.swing.JLabel lExito;
    private javax.swing.JToggleButton tbEstado;
    private javax.swing.JTable tblEvaluacion;
    private javax.swing.JTextField tfEvaluacion;
    private javax.swing.JTextField tfFecha;
    // End of variables declaration//GEN-END:variables

    private SsfEvaluacionBO ebo;
    private HashMap<String, Integer> mapte = new HashMap<>();
    private HashMap<String, Integer> mape = new HashMap<>();
    private HashMap<String, Integer> mapee = new HashMap<>();
    private static Logger log = Logger.getLogger(MantenedorEvaluacion.class.getName());

    public void cargaEvaluacionTipo() {
        SsfEvaluaciontipoBO etbo = new SsfEvaluaciontipoBO();
        List<SsfEvaluaciontipo> etlist = etbo.getAllSP();
        etlist.forEach((et) -> {
            mapte.put(et.getTopo(), et.getId().intValue());
        });
        etlist.forEach((et) -> {
            cbTipoEval.addItem(et.getTopo());
        });
    }

    public void cargaEvaluacionEstado() {
        SsfEvaluacionestadoBO eebo = new SsfEvaluacionestadoBO();
        List<SsfEvaluacionestado> eelist = eebo.getAllSP();
        eelist.forEach((ee) -> {
            mapee.put(ee.getEstadoeval(), ee.getId().intValue());
        });
        eelist.forEach((ee) -> {
            cbEstadoEval.addItem(ee.getEstadoeval());
        });
    }

    public void cargaEmpresa() {
        SsfEmpresaBO embo = new SsfEmpresaBO();
        List<SsfEmpresa> elist = embo.getAllSP();
        elist.forEach((e) -> {
            mape.put(e.getNombre(), e.getId().intValue());
        });
        elist.forEach((e) -> {
            cbEmpresa.addItem(e.getNombre());
        });
    }

    private void cargaTabla() {
        borrarTabla();
        DefaultTableModel model = (DefaultTableModel) tblEvaluacion.getModel();
        ebo = new SsfEvaluacionBO();
        List<SsfEvaluacion> le = ebo.getAllSP();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        String sfecha = null;
        for (SsfEvaluacion e : le) {
            if (e.getFecha() != null) {
                sfecha = sdf.format(e.getFecha());
            } else {
                sfecha = "";
            }
            model.addRow(new Object[]{e.getId(), e.getNombre(), sfecha, e.getIdEmpresa().getNombre(), e.getIdEvaluacionestado().getEstadoeval(), e.getIdEvaluaciontipo().getTopo(), sdf.format(e.getFechCreacion()), e.getEstado()});
        }
        tblEvaluacion.setModel(model);
    }

    private void borrarTabla() {
        tblEvaluacion.removeAll();
        tblEvaluacion.repaint();
        DefaultTableModel model = (DefaultTableModel) tblEvaluacion.getModel();
        model.fireTableDataChanged();
        tblEvaluacion.repaint();
        tblEvaluacion.removeAll();
        int rows = model.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        tblEvaluacion.removeAll();
        model.setRowCount(0);
        model.fireTableDataChanged();
        tblEvaluacion.repaint();
        tblEvaluacion.setModel(model);
        tblEvaluacion.repaint();
        tblEvaluacion.removeAll();
    }

    private void desactivarEstado() {
        tbEstado.setText("Desactivado");
        tbEstado.setBackground(new java.awt.Color(255, 51, 51));
    }

    private void activarEstado() {
        tbEstado.setText("Activo");
        tbEstado.setBackground(new java.awt.Color(0, 204, 102));
    }

    private void limpiarMsgs() {
        lExito.setText("");
        lError.setText("");
    }

}
