/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package duoc.cl.safe.forms;

import duoc.cl.safe.entity.SsfEmpresa;
import duoc.cl.safe.entity.SsfPerfil;
import duoc.cl.safe.entity.SsfPersona;
import duoc.cl.safe.entity.SsfUsuario;
import duoc.cl.safe.negocio.SsfEmpresaBO;
import duoc.cl.safe.negocio.SsfPerfilBO;
import duoc.cl.safe.negocio.SsfPersonaBO;
import duoc.cl.safe.negocio.SsfUsuarioBO;
import java.awt.Color;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nacho
 */
public class MantenedorUsuario extends javax.swing.JFrame {

    /**
     * Creates new form MantenedorUsuario
     */
    public MantenedorUsuario() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfUsuario = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        pfPassword = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        cbPersona = new javax.swing.JComboBox<>();
        tfBuscarPersona = new javax.swing.JTextField();
        bBuscarPersona = new javax.swing.JButton();
        cbPerfil = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbEmpresa = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsuario = new javax.swing.JTable();
        lExito = new javax.swing.JLabel();
        lError = new javax.swing.JLabel();
        bAgregar = new javax.swing.JButton();
        bLimpiar = new javax.swing.JButton();
        bModificar = new javax.swing.JButton();
        tbEstado = new javax.swing.JToggleButton();
        pfRepetirPass = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        bBuscarUsuario = new javax.swing.JButton();
        tfBuscarUsuario = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Usuario:");

        jLabel2.setText("Contraseña:");

        cbPersona.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Seleccione Persona -" }));
        cbPersona.setEnabled(false);

        bBuscarPersona.setText("Buscar Persona");
        bBuscarPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarPersonaActionPerformed(evt);
            }
        });

        cbPerfil.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Seleccione Perfil -" }));
        cbPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPerfilActionPerformed(evt);
            }
        });

        jLabel3.setText("Perfil:");

        jLabel4.setText("Empresa:");

        cbEmpresa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Seleccione Empresa -" }));
        cbEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEmpresaActionPerformed(evt);
            }
        });

        tblUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Usuario", "Contraseña", "Persona", "Perfil", "Empresa", "Fecha Creación", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Short.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUsuarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblUsuario);

        lExito.setForeground(new java.awt.Color(0, 204, 51));

        lError.setForeground(new java.awt.Color(255, 51, 51));

        bAgregar.setText("Agregar");
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });

        bLimpiar.setText("Limpiar");
        bLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpiarActionPerformed(evt);
            }
        });

        bModificar.setText("Modificar");
        bModificar.setEnabled(false);
        bModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bModificarActionPerformed(evt);
            }
        });

        tbEstado.setBackground(new java.awt.Color(0, 204, 102));
        tbEstado.setText("Activo");
        tbEstado.setEnabled(false);
        tbEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbEstadoActionPerformed(evt);
            }
        });

        jLabel5.setText("Repetir:");

        bBuscarUsuario.setText("Buscar Usuario");
        bBuscarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lExito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(pfRepetirPass, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbPerfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 78, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(bAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bLimpiar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bModificar)
                                .addGap(18, 18, 18)
                                .addComponent(tbEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cbEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(tfBuscarPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(bBuscarPersona, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(cbPersona, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfBuscarUsuario)
                                .addGap(18, 18, 18)
                                .addComponent(bBuscarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 52, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cbPerfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfBuscarPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bBuscarPersona)
                    .addComponent(tfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pfRepetirPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(bBuscarUsuario)
                    .addComponent(tfBuscarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lExito, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bAgregar)
                        .addComponent(bLimpiar)
                        .addComponent(bModificar)
                        .addComponent(tbEstado)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        cargaEmpresa();
        cargaPerfil();
        cargaTabla();
    }//GEN-LAST:event_formWindowOpened

    private void cbEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEmpresaActionPerformed
        /*
        if (cbEmpresa.getSelectedIndex() != 0) {
            tfBuscarPersona.setText(mape.get(cbEmpresa.getSelectedItem()).toString());
        } else {
            tfBuscarPersona.setText("");
        }
         */

    }//GEN-LAST:event_cbEmpresaActionPerformed

    private void cbPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPerfilActionPerformed
        /*
        if (cbPerfil.getSelectedIndex() != 0) {
            tfUsuario.setText(mapp.get(cbPerfil.getSelectedItem()).toString());
        } else {
            tfUsuario.setText("");
        }
         */
    }//GEN-LAST:event_cbPerfilActionPerformed

    private void bBuscarPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarPersonaActionPerformed
        String busqueda = tfBuscarPersona.getText().trim();
        //split(Pattern.quote(".")) - str.split("\\s+");
        if (busqueda.equals("")) {
            tfBuscarPersona.setText("Búsqueda no puede ser vacío");
        } else {
            String[] palabras = busqueda.split("\\s+");
            String[] palabras2 = busqueda.split(Pattern.quote("."));
            List<SsfPersona> pp = new LinkedList<>();
            SsfPersonaBO persBO = new SsfPersonaBO();
            List<SsfPersona> ppall = persBO.getAllSP();
            for (String s : palabras) {
                for (SsfPersona pers : ppall) {
                    if (pers.getRut() != null) {
                        if (!pp.isEmpty()) {
                            if (!existeIdPers(pp, pers) && pers.getRut().contains(s)) {
                                pp.add(pers);
                            }
                        } else {
                            if (pers.getRut().contains(s)) {
                                pp.add(pers);
                            }
                        }
                    }
                    if (pers.getNombre() != null) {
                        if (!pp.isEmpty()) {
                            if (!existeIdPers(pp, pers) && pers.getNombre().contains(s)) {
                                pp.add(pers);
                            }
                        } else {
                            if (pers.getNombre().contains(s)) {
                                pp.add(pers);
                            }
                        }
                    }
                    if (pers.getApPaterno() != null) {
                        if (!pp.isEmpty()) {
                            if (!existeIdPers(pp, pers) && pers.getApPaterno().contains(s)) {
                                pp.add(pers);
                            }
                        } else {
                            if (pers.getApPaterno().contains(s)) {
                                pp.add(pers);
                            }
                        }
                    }
                    if (pers.getApMaterno() != null) {
                        if (!pp.isEmpty()) {
                            if (!existeIdPers(pp, pers) && pers.getApMaterno().contains(s)) {
                                pp.add(pers);
                            }
                        } else {
                            if (pers.getApMaterno().contains(s)) {
                                pp.add(pers);
                            }
                        }
                    }
                }
            }
            if (!pp.isEmpty()) {
                cbPersona.removeAllItems();
                cargaPersonas(pp);
            } else {
                tfBuscarPersona.setText("Búsqueda sin resultados");
                cbPersona.setEnabled(false);
            }

        }

    }//GEN-LAST:event_bBuscarPersonaActionPerformed

    private void tbEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbEstadoActionPerformed
        limpiarMsgs();
        model = (DefaultTableModel) tblUsuario.getModel();
        SsfUsuarioBO ubo = new SsfUsuarioBO();
        SsfUsuario u = null;

        if (tblUsuario.getSelectedRow() == -1) {
            tbEstado.setEnabled(false);
            if (tblUsuario.getRowCount() == 0) {
                lError.setText("Tabla vacía");
            } else {
                lError.setText("No hay fila seleccionada");
            }
        } else {
            int id = Short.parseShort(model.getValueAt(tblUsuario.getSelectedRow(), 0).toString());
            if (!tbEstado.isSelected()) {
                activarEstado();
                model.setValueAt("1", tblUsuario.getSelectedRow(), 7);
                u = ubo.find(id);
                u.setEstado(Short.parseShort("1"));
                ubo.update(u);
            } else {
                desactivarEstado();
                model.setValueAt("0", tblUsuario.getSelectedRow(), 7);
                u = ubo.find(id);
                u.setEstado(Short.parseShort("0"));
                ubo.update(u);
            }
        }
    }//GEN-LAST:event_tbEstadoActionPerformed

    private void tblUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUsuarioMouseClicked
        limpiarMsgs();
        tbEstado.setEnabled(true);
        bModificar.setEnabled(true);
        model = (DefaultTableModel) tblUsuario.getModel();
        //cbEmpresa.setSelectedItem("Cliente 2");
        if (Short.parseShort(model.getValueAt(tblUsuario.getSelectedRow(), 7).toString()) == 1) {
            tbEstado.setSelected(false);
            activarEstado();
        } else {
            tbEstado.setSelected(true);
            desactivarEstado();
        }
        if (model.getValueAt(tblUsuario.getSelectedRow(), 1) != null) {
            tfUsuario.setText(model.getValueAt(tblUsuario.getSelectedRow(), 1).toString());
        } else {
            tfUsuario.setText("");
        }
        if (model.getValueAt(tblUsuario.getSelectedRow(), 2) != null) {
            pfPassword.setText(model.getValueAt(tblUsuario.getSelectedRow(), 2).toString());
            pfRepetirPass.setText(model.getValueAt(tblUsuario.getSelectedRow(), 2).toString());
        } else {
            pfPassword.setText("");
            pfRepetirPass.setText("");
        }
        if (model.getValueAt(tblUsuario.getSelectedRow(), 5) != null) {
            cbEmpresa.setSelectedItem(model.getValueAt(tblUsuario.getSelectedRow(), 5).toString());
        } else {
            cbEmpresa.setSelectedIndex(0);
        }
        if (model.getValueAt(tblUsuario.getSelectedRow(), 4) != null) {
            cbPerfil.setSelectedItem(model.getValueAt(tblUsuario.getSelectedRow(), 4).toString());
        } else {
            cbPerfil.setSelectedIndex(0);
        }
        if (model.getValueAt(tblUsuario.getSelectedRow(), 3) != null) {
            cbPersona.setEnabled(true);
            cargaPersona();
            //cbPersona.setSelectedItem(model.getValueAt(tblUsuario.getSelectedRow(), 3).toString());
        } else {
            cbPersona.setSelectedIndex(0);
        }
    }//GEN-LAST:event_tblUsuarioMouseClicked

    private void bLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpiarActionPerformed
        tbEstado.setEnabled(false);
        bModificar.setEnabled(false);
        cbPersona.setEnabled(false);
        limpiarMsgs();
        tblUsuario.clearSelection();
        tfUsuario.setText("");
        tfBuscarPersona.setText("");
        tfBuscarUsuario.setText("");
        pfPassword.setText("");
        pfRepetirPass.setText("");
        cbEmpresa.setSelectedIndex(0);
        cbPerfil.setSelectedIndex(0);
    }//GEN-LAST:event_bLimpiarActionPerformed

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        SsfUsuarioBO ubo = new SsfUsuarioBO();
        /*
        SsfPersonaBO pbo = new SsfPersonaBO();
        SsfPerfilBO perfbo = new SsfPerfilBO();
        SsfEmpresaBO ebo = new SsfEmpresaBO();
         */
        limpiarMsgs();
        if (tfUsuario.getText().trim().equals("")) {
            lError.setText("Ingrese un nombre de usuario");
        } else if (cbEmpresa.getSelectedIndex() == 0) {
            lError.setText("Seleccione una Empresa");
        } else if (cbPerfil.getSelectedIndex() == 0) {
            lError.setText("Seleccione un Perfil");
        } else if (pfPassword.getText().trim().equals("")) {
            lError.setText("Las contraseñas no pueden dejarse en blanco");
        } else if (!pfPassword.getText().equals(pfRepetirPass.getText())) {
            lError.setText("¡Las contraseñas no coinciden!");
        } else if (!cbPersona.isEnabled()) {
            lError.setText("¡Debe seleccionar una persona!");
        } else {
            String username, password, idpersona, idperfil, idempresa;
            username = tfUsuario.getText();
            password = pfPassword.getText();
            idpersona = mappers.get(cbPersona.getSelectedItem()).toString();
            idperfil = mapp.get(cbPerfil.getSelectedItem()).toString();
            idempresa = mape.get(cbEmpresa.getSelectedItem()).toString();
            SsfUsuario u = new SsfUsuario();
            u.setUsername(username);
            u.setContrasena(password);
            u.setIdPersona(new SsfPersona(BigDecimal.valueOf((long) Long.valueOf(idpersona))));
            u.setIdPerfil(new SsfPerfil(BigDecimal.valueOf((long) Long.valueOf(idperfil))));
            u.setIdEmpresa(new SsfEmpresa(BigDecimal.valueOf((long) Long.valueOf(idempresa))));
            if (ubo.add(u)) {
                lExito.setText("Persona agregada exitosamente.");
                cargaTabla();
            } else {
                lError.setText("No se pudo agregar");
            }

            /*
            u.setIdPersona(pbo.findSP(Integer.valueOf(idpersona)));
            u.setIdPerfil(perfbo.find(Integer.valueOf(idperfil)));
            u.setIdEmpresa(ebo.find(Integer.valueOf(idempresa)));
             */
        }


    }//GEN-LAST:event_bAgregarActionPerformed

    private void bModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bModificarActionPerformed
        SsfUsuarioBO ubo = new SsfUsuarioBO();
        limpiarMsgs();

        if (tblUsuario.getSelectedRow() == -1) {
            tbEstado.setEnabled(false);
            if (tblUsuario.getRowCount() == 0) {
                lError.setText("Tabla vacía");
            } else {
                lError.setText("No hay fila seleccionada");
            }
        } else {
            if (tfUsuario.getText().trim().equals("")) {
                lError.setText("Ingrese un nombre de usuario");
            } else if (cbEmpresa.getSelectedIndex() == 0) {
                lError.setText("Seleccione una Empresa");
            } else if (cbPerfil.getSelectedIndex() == 0) {
                lError.setText("Seleccione un Perfil");
            } else if (pfPassword.getText().trim().equals("")) {
                lError.setText("Las contraseñas no pueden dejarse en blanco");
            } else if (!pfPassword.getText().equals(pfRepetirPass.getText())) {
                lError.setText("¡Las contraseñas no coinciden!");
            } else if (!cbPersona.isEnabled()) {
                lError.setText("¡Debe seleccionar una persona!");
            } else {
                String id, username, password, idpersona, idperfil, idempresa;
                id = model.getValueAt(tblUsuario.getSelectedRow(), 0).toString();
                username = tfUsuario.getText();
                password = pfPassword.getText();
                idpersona = mappers.get(cbPersona.getSelectedItem()).toString();
                idperfil = mapp.get(cbPerfil.getSelectedItem()).toString();
                idempresa = mape.get(cbEmpresa.getSelectedItem()).toString();
                SsfUsuario u = ubo.find(Integer.valueOf(id));
                u.setId(BigDecimal.valueOf((long) Long.valueOf(id)));
                u.setUsername(username);
                u.setContrasena(password);
                u.setIdPersona(new SsfPersona(BigDecimal.valueOf((long) Long.valueOf(idpersona))));
                u.setIdPerfil(new SsfPerfil(BigDecimal.valueOf((long) Long.valueOf(idperfil))));
                u.setIdEmpresa(new SsfEmpresa(BigDecimal.valueOf((long) Long.valueOf(idempresa))));
                if (ubo.update(u)) {
                    lExito.setText("Persona modficada exitosamente.");
                } else {
                    lError.setText("No se pudo modificar");
                }
            }
        }
        cargaTabla();
    }//GEN-LAST:event_bModificarActionPerformed

    private void bBuscarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarUsuarioActionPerformed
        String busqueda = tfBuscarUsuario.getText().trim();
        //split(Pattern.quote(".")) - str.split("\\s+");
        if (busqueda.equals("")) {
            tfBuscarPersona.setText("Búsqueda no puede ser vacía");
        } else {
            String[] palabras = busqueda.split("\\s+");
            String[] palabras2 = busqueda.split(Pattern.quote("."));
            List<SsfUsuario> uu = new LinkedList<>();
            SsfUsuarioBO ubo = new SsfUsuarioBO();
            List<SsfUsuario> uuall = ubo.getAll();
            for (String s : palabras) {
                for (SsfUsuario u : uuall) {
                    if (u.getUsername()!= null) {
                        if (!uu.isEmpty()) {
                            if (!existeIdUsuario(uu, u) && u.getUsername().contains(s)) {
                                uu.add(u);
                            }
                        } else {
                            if (u.getUsername().contains(s)) {
                                uu.add(u);
                            }
                        }
                    }
                    if (u.getIdPersona().getNombre()!= null) {
                        if (!uu.isEmpty()) {
                            if (!existeIdUsuario(uu, u) && u.getIdPersona().getNombre().contains(s)) {
                                uu.add(u);
                            }
                        } else {
                            if (u.getIdPersona().getNombre().contains(s)) {
                                uu.add(u);
                            }
                        }
                    }
                    if (u.getIdPersona().getApPaterno() != null) {
                        if (!uu.isEmpty()) {
                            if (!existeIdUsuario(uu, u) && u.getIdPersona().getApPaterno().contains(s)) {
                                uu.add(u);
                            }
                        } else {
                            if (u.getIdPersona().getApPaterno().contains(s)) {
                                uu.add(u);
                            }
                        }
                    }
                    if (u.getIdPersona().getApMaterno() != null) {
                        if (!uu.isEmpty()) {
                            if (!existeIdUsuario(uu, u) && u.getIdPersona().getApMaterno().contains(s)) {
                                uu.add(u);
                            }
                        } else {
                            if (u.getIdPersona().getApMaterno().contains(s)) {
                                uu.add(u);
                            }
                        }
                    }
                    if (u.getIdPerfil().getPerfil()!= null) {
                        if (!uu.isEmpty()) {
                            if (!existeIdUsuario(uu, u) && u.getIdPerfil().getPerfil().contains(s)) {
                                uu.add(u);
                            }
                        } else {
                            if (u.getIdPerfil().getPerfil().contains(s)) {
                                uu.add(u);
                            }
                        }
                    }
                    if (u.getIdEmpresa().getNombre()!= null) {
                        if (!uu.isEmpty()) {
                            if (!existeIdUsuario(uu, u) && u.getIdEmpresa().getNombre().contains(s)) {
                                uu.add(u);
                            }
                        } else {
                            if (u.getIdEmpresa().getNombre().contains(s)) {
                                uu.add(u);
                            }
                        }
                    }
                }
            }
            for (String s : palabras2) {
                for (SsfUsuario u : uuall) {
                    if (u.getIdPersona().getRut()!= null) {
                        if (!uu.isEmpty()) {
                            if (!existeIdUsuario(uu, u) && u.getIdPersona().getRut().contains(s)) {
                                uu.add(u);
                            }
                        } else {
                            if (u.getIdPersona().getRut().contains(s)) {
                                uu.add(u);
                            }
                        }
                    }
                }
            }
            if (!uu.isEmpty()) {
                cbPersona.removeAllItems();
                cargaUsuarios(uu);
            } else {
                tfBuscarPersona.setText("Búsqueda sin resultados");
                cbPersona.setEnabled(false);
            }

        }
    }//GEN-LAST:event_bBuscarUsuarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenedorUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenedorUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenedorUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenedorUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MantenedorUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAgregar;
    private javax.swing.JButton bBuscarPersona;
    private javax.swing.JButton bBuscarUsuario;
    private javax.swing.JButton bLimpiar;
    private javax.swing.JButton bModificar;
    private javax.swing.JComboBox<String> cbEmpresa;
    private javax.swing.JComboBox<String> cbPerfil;
    private javax.swing.JComboBox<String> cbPersona;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lError;
    private javax.swing.JLabel lExito;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JPasswordField pfRepetirPass;
    private javax.swing.JToggleButton tbEstado;
    private javax.swing.JTable tblUsuario;
    private javax.swing.JTextField tfBuscarPersona;
    private javax.swing.JTextField tfBuscarUsuario;
    private javax.swing.JTextField tfUsuario;
    // End of variables declaration//GEN-END:variables
    private HashMap<String, Integer> mape = new HashMap<>();
    private HashMap<String, Integer> mapp = new HashMap<>();
    private HashMap<String, Integer> mappers = new HashMap<>();
    DefaultTableModel model;
    List<SsfUsuario> lu;

    public void cargaEmpresa() {
        SsfEmpresaBO ebo = new SsfEmpresaBO();
        List<SsfEmpresa> elist = ebo.getAll();
        elist.forEach((e) -> {
            mape.put(e.getNombre(), e.getId().intValue());
        });
        elist.forEach((e) -> {
            cbEmpresa.addItem(e.getNombre());
        });
    }

    public void cargaPerfil() {
        SsfPerfilBO pbo = new SsfPerfilBO();
        List<SsfPerfil> plist = pbo.getAll();
        plist.forEach((p) -> {
            mapp.put(p.getPerfil(), p.getId().intValue());
        });
        plist.forEach((p) -> {
            cbPerfil.addItem(p.getPerfil());
        });
    }

    private void cargaPersonas(List<SsfPersona> pp) {
        mappers = new HashMap<>();
        cbPersona.setEnabled(true);
        cbPersona.removeAllItems();
        pp.forEach((p) -> {
            mappers.put("Rut: " + p.getRut() + " - Nombre: " + p.getNombre() + " " + p.getApPaterno() + " " + p.getApMaterno(), p.getId().intValue());
        });

        mappers.forEach((s, i) -> {
            cbPersona.addItem(s);
            //System.out.println(i);
        });
    }

    private void cargaPersona() {
        mappers = new HashMap<>();
        cbPersona.setEnabled(true);
        cbPersona.removeAllItems();
        Long id = Long.valueOf(model.getValueAt(tblUsuario.getSelectedRow(), 0).toString());
        SsfUsuario u = null;
        for (SsfUsuario u2 : lu) {
            if (u2.getId().longValue() == (long) id) {
                u = u2;
            }
        }
        if (u != null) {
            mappers.put("Rut: " + u.getIdPersona().getRut() + " - Nombre: " + u.getIdPersona().getNombre()
                    + " " + u.getIdPersona().getApPaterno() + " " + u.getIdPersona().getApMaterno(),
                    u.getIdPersona().getId().intValue());
        }
        if (!mappers.isEmpty()) {
            mappers.forEach((s, i) -> {
                cbPersona.addItem(s);
                cbPersona.setSelectedItem(s);
            });
        }

    }

    private boolean existeIdPers(List<SsfPersona> pp, SsfPersona pers) {
        for (SsfPersona p : pp) {
            if (p.getId() == pers.getId()) {
                return true;
            }
        }
        return false;
    }

    private void cargaTabla() {
        borrarTabla();
        SsfUsuarioBO ubo = new SsfUsuarioBO();
        lu = ubo.getAll();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");

        for (SsfUsuario u : lu) {
            model.addRow(new Object[]{u.getId(), u.getUsername(), u.getContrasena(),
                u.getIdPersona().getRut() + " " + u.getIdPersona().getNombre() + " " + u.getIdPersona().getApPaterno(),
                u.getIdPerfil().getPerfil(), u.getIdEmpresa().getNombre(), sdf.format(u.getFechCreacion()),
                u.getEstado()});
        }
        tblUsuario.setModel(model);
    }

    private void borrarTabla() {
        tblUsuario.removeAll();
        tblUsuario.repaint();
        model = (DefaultTableModel) tblUsuario.getModel();
        model.fireTableDataChanged();
        tblUsuario.repaint();
        tblUsuario.removeAll();
        int rows = model.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        tblUsuario.removeAll();
        model.setRowCount(0);
        model.fireTableDataChanged();
        tblUsuario.repaint();
        tblUsuario.setModel(model);
        tblUsuario.repaint();
        tblUsuario.removeAll();
    }

    private void limpiarMsgs() {
        lExito.setText("");
        lError.setText("");
    }

    private void desactivarEstado() {
        tbEstado.setText("Desactivado");
        tbEstado.setBackground(new java.awt.Color(255, 51, 51));
    }

    private void activarEstado() {
        tbEstado.setText("Activo");
        tbEstado.setBackground(new java.awt.Color(0, 204, 102));
    }

    private boolean existeIdUsuario(List<SsfUsuario> uu, SsfUsuario u) {
        for (SsfUsuario usuario : uu) {
            if (usuario.getId() == u.getId()) {
                return true;
            }
        }
        return false;
    }

    private void cargaUsuarios(List<SsfUsuario> uu) {
        borrarTabla();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        for (SsfUsuario u : uu) {

            model.addRow(new Object[]{u.getId(), u.getUsername(), u.getContrasena(),
                u.getIdPersona().getRut()+" "+u.getIdPersona().getNombre()+" "+u.getIdPersona().getApPaterno(),
                    u.getIdPerfil().getPerfil(), u.getIdEmpresa().getNombre(),
                    sdf.format(u.getFechCreacion()), u.getEstado()});
        }
        tblUsuario.setModel(model);
    }

}
