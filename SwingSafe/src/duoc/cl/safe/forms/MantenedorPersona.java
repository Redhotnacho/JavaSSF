/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package duoc.cl.safe.forms;

import duoc.cl.safe.entity.SsfPersona;
import duoc.cl.safe.negocio.SsfPersonaBO;
import java.awt.Color;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nacho
 */
public class MantenedorPersona extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MantenedorPersona() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lError = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPersona = new javax.swing.JTable();
        bAgregar = new javax.swing.JButton();
        bModificar = new javax.swing.JButton();
        tbEstado = new javax.swing.JToggleButton();
        tfTelefono = new javax.swing.JTextField();
        tfCorreo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfAp1 = new javax.swing.JTextField();
        tfAp2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfRut = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tfNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfFechaNac = new javax.swing.JTextField();
        bLimpiar = new javax.swing.JButton();
        lExito = new javax.swing.JLabel();
        tfBuscar = new javax.swing.JTextField();
        bBuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lError.setForeground(new java.awt.Color(204, 0, 0));

        tblPersona.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "RUT", "Nombre", "Apellido 1", "Apellido 2", "Correo", "Teléfono", "Fecha Nacimiento", "Fecha Creación", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Short.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPersona.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPersonaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPersona);

        bAgregar.setText("Agregar");
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });

        bModificar.setText("Modificar");
        bModificar.setEnabled(false);
        bModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bModificarActionPerformed(evt);
            }
        });

        tbEstado.setBackground(new java.awt.Color(0, 204, 102));
        tbEstado.setText("Activo");
        tbEstado.setEnabled(false);
        tbEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbEstadoActionPerformed(evt);
            }
        });

        jLabel5.setText("Correo:");

        jLabel6.setText("Teléfono:");

        jLabel3.setText("Apellido 1:");

        jLabel4.setText("Apellido 2:");

        jLabel1.setText("RUT:");

        jLabel2.setText("Nombre:");

        jLabel7.setText("Fecha Nacimiento:");

        tfFechaNac.setText("DD-MM-AAAA");

        bLimpiar.setText("Limpiar");
        bLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpiarActionPerformed(evt);
            }
        });

        lExito.setForeground(new java.awt.Color(0, 204, 51));

        bBuscar.setText("Buscar Persona");
        bBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel7))
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tfRut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(tfFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lExito, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lError, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(bAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bLimpiar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bModificar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 147, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(4, 4, 4)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfAp1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfAp2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(36, 36, 36)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(tfBuscar)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel6)
                                                    .addComponent(jLabel5))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(tfCorreo, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                                                    .addComponent(tfTelefono))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(tfCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(tfTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfAp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfAp2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bAgregar)
                            .addComponent(bModificar)
                            .addComponent(tbEstado)
                            .addComponent(bLimpiar)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfRut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(tfFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lError, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                    .addComponent(lExito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        cargaTabla();
    }//GEN-LAST:event_formWindowOpened

    private void tblPersonaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPersonaMouseClicked
        limpiarMsgs();
        tbEstado.setEnabled(true);
        bModificar.setEnabled(true);
        DefaultTableModel model = (DefaultTableModel) tblPersona.getModel();
        if (Short.parseShort(model.getValueAt(tblPersona.getSelectedRow(), 9).toString()) == 1) {
            tbEstado.setSelected(false);
            activarEstado();
        } else {
            tbEstado.setSelected(true);
            desactivarEstado();
        }
        if (model.getValueAt(tblPersona.getSelectedRow(), 1) != null) {
            tfRut.setText(model.getValueAt(tblPersona.getSelectedRow(), 1).toString());
        } else {
            tfRut.setText("");
        }
        if (model.getValueAt(tblPersona.getSelectedRow(), 2) != null) {
            tfNombre.setText(model.getValueAt(tblPersona.getSelectedRow(), 2).toString());
        } else {
            tfNombre.setText("");
        }
        if (model.getValueAt(tblPersona.getSelectedRow(), 3) != null) {
            tfAp1.setText(model.getValueAt(tblPersona.getSelectedRow(), 3).toString());
        } else {
            tfAp1.setText("");
        }
        if (model.getValueAt(tblPersona.getSelectedRow(), 4) != null) {
            tfAp2.setText(model.getValueAt(tblPersona.getSelectedRow(), 4).toString());
        } else {
            tfAp2.setText("");
        }
        if (model.getValueAt(tblPersona.getSelectedRow(), 5) != null) {
            tfCorreo.setText(model.getValueAt(tblPersona.getSelectedRow(), 5).toString());
        } else {
            tfCorreo.setText("");
        }
        if (model.getValueAt(tblPersona.getSelectedRow(), 6) != null) {
            tfTelefono.setText(model.getValueAt(tblPersona.getSelectedRow(), 6).toString());
        } else {
            tfTelefono.setText("");
        }
        if (model.getValueAt(tblPersona.getSelectedRow(), 7) != null) {
            tfFechaNac.setText(model.getValueAt(tblPersona.getSelectedRow(), 7).toString());
        } else {
            tfFechaNac.setText("");
        }

    }//GEN-LAST:event_tblPersonaMouseClicked

    private void tbEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbEstadoActionPerformed
        limpiarMsgs();
        DefaultTableModel model = (DefaultTableModel) tblPersona.getModel();
        pbo = new SsfPersonaBO();

        if (tblPersona.getSelectedRow() == -1) {
            tbEstado.setEnabled(false);
            if (tblPersona.getRowCount() == 0) {
                lError.setText("Tabla vacía");
            } else {
                lError.setText("No hay fila seleccionada");
            }
        } else {
            int id = Short.parseShort(model.getValueAt(tblPersona.getSelectedRow(), 0).toString());
            if (!tbEstado.isSelected()) {
                activarEstado();
                model.setValueAt("1", tblPersona.getSelectedRow(), 9);
                pbo.activarSP(id);
            } else {
                desactivarEstado();
                model.setValueAt("0", tblPersona.getSelectedRow(), 9);
                pbo.desactivarSP(id);

            }
        }

    }//GEN-LAST:event_tbEstadoActionPerformed

    private void bLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpiarActionPerformed
        tfFechaNac.setText("DD-MM-AAAA");
        tbEstado.setEnabled(false);
        bModificar.setEnabled(false);
        limpiarMsgs();
        tblPersona.clearSelection();
        tfRut.setText("");
        tfNombre.setText("");
        tfAp1.setText("");
        tfAp2.setText("");
        tfCorreo.setText("");
        tfTelefono.setText("");
        tfFechaNac.setText("");
        tfBuscar.setText("");
    }//GEN-LAST:event_bLimpiarActionPerformed

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        pbo = new SsfPersonaBO();
        limpiarMsgs();
        if (tfNombre.getText().trim().equals("")) {
            lError.setText("Ingrese un nombre");
        } else {
            String rut, nom, ap1, ap2, correo, tel, sfech;
            Date fecha = null;
            rut = tfRut.getText();
            nom = tfNombre.getText();
            ap1 = tfAp1.getText();
            ap2 = tfAp2.getText();
            correo = tfCorreo.getText();
            tel = tfTelefono.getText();
            sfech = tfFechaNac.getText();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            SsfPersona p = new SsfPersona();
            try {
                if (!sfech.equals("")) {
                    fecha = sdf.parse(sfech);
                    p.setFechaNac(fecha);
                }
            } catch (ParseException ex) {
                //Logger.getLogger(MantenedorPersona.class.getName()).log(Level.SEVERE, null, ex);
                log.log(Level.SEVERE, "Error en formato de fecha", ex);
                sfech = "error";
                lError.setText("Error en formato de fecha");
            }
            try {
                if (!tel.equals("")) {
                    BigInteger telbi = BigInteger.valueOf(new Long(tel));
                    p.setTelefono(telbi);
                }
            } catch (Exception e) {
                Logger.getLogger(MantenedorPersona.class.getName()).log(Level.SEVERE, null, e);
                log.log(Level.SEVERE, "Error en valor de telefono", e);
                lError.setText("Error en valor de telefono");
            }
            if (!sfech.equals("error")) {
                p.setRut(rut);
                p.setNombre(nom);
                p.setApPaterno(ap1);
                p.setApMaterno(ap2);
                p.setCorreo(correo);
                if (pbo.addSP(p)) {
                    lExito.setText("Persona agregada exitosamente.");
                    cargaTabla();
                } else {
                    lError.setText("No se pudo agregar");
                }

            }

        }
    }//GEN-LAST:event_bAgregarActionPerformed

    private void bModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bModificarActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblPersona.getModel();
        pbo = new SsfPersonaBO();
        limpiarMsgs();
        if (tblPersona.getSelectedRow() == -1) {
            tbEstado.setEnabled(false);
            if (tblPersona.getRowCount() == 0) {
                lError.setText("Tabla vacía");
            } else {
                lError.setText("No hay fila seleccionada");
            }
        } else {
            if (tfNombre.getText().trim().equals("")) {
                lError.setText("Ingrese un nombre");
            } else {
                String rut, nom, ap1, ap2, correo, tel, sfech, id;
                id = model.getValueAt(tblPersona.getSelectedRow(), 0).toString();
                Date fecha = null;
                rut = tfRut.getText();
                nom = tfNombre.getText();
                ap1 = tfAp1.getText();
                ap2 = tfAp2.getText();
                correo = tfCorreo.getText();
                tel = tfTelefono.getText();
                sfech = tfFechaNac.getText();
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                SsfPersona p = new SsfPersona();
                try {
                    if (!sfech.equals("")) {
                        fecha = sdf.parse(sfech);
                        p.setFechaNac(fecha);
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(MantenedorPersona.class.getName()).log(Level.SEVERE, null, ex);
                    log.log(Level.SEVERE, "Error en formato de fecha", ex);
                    sfech = "error";
                    lError.setText("Error en formato de fecha");
                }
                try {
                    if (!tel.equals("")) {
                        BigInteger telbi = BigInteger.valueOf(new Long(tel));
                        p.setTelefono(telbi);
                    }
                } catch (Exception e) {
                    Logger.getLogger(MantenedorPersona.class.getName()).log(Level.SEVERE, null, e);
                    log.log(Level.SEVERE, "Error en valor de telefono", e);
                    lError.setText("Error en valor de telefono");
                    tel = "error";
                }
                if (!sfech.equals("error")) {
                    p.setId(BigDecimal.valueOf(Long.valueOf(id)));
                    p.setRut(rut);
                    p.setNombre(nom);
                    p.setApPaterno(ap1);
                    p.setApMaterno(ap2);
                    p.setCorreo(correo);
                    if (pbo.updateSP(p)) {
                        lExito.setText("Persona modificada exitosamente.");
                        // método cargaTabla() no actualiza la tabla por motivos desconocidos
                        model.setValueAt(rut, tblPersona.getSelectedRow(), 1);
                        model.setValueAt(nom, tblPersona.getSelectedRow(), 2);
                        model.setValueAt(ap1, tblPersona.getSelectedRow(), 3);
                        model.setValueAt(ap2, tblPersona.getSelectedRow(), 4);
                        model.setValueAt(correo, tblPersona.getSelectedRow(), 5);
                        if (!tel.equals("error")) {
                            model.setValueAt(tel, tblPersona.getSelectedRow(), 6);
                        }
                        model.setValueAt(sfech, tblPersona.getSelectedRow(), 7);
 
                    } else {
                        lError.setText("No se pudo modificar");
                    }

                }

            }
        }
        //cargaTabla();
    }//GEN-LAST:event_bModificarActionPerformed

    private void bBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarActionPerformed
        
        String busqueda = tfBuscar.getText().trim();
        //split(Pattern.quote(".")) - str.split("\\s+");
        if (busqueda.equals("")) {
            tfBuscar.setText("Búsqueda no puede ser vacío");
        } else {
            String[] palabras = busqueda.split("\\s+");
            String[] palabras2 = busqueda.split(Pattern.quote("."));
            List<SsfPersona> pp = new LinkedList<>();
            pbo = new SsfPersonaBO();
            List<SsfPersona> ppall = pbo.getAllSP();
            for (String s : palabras) {
                for (SsfPersona pers : ppall) {
                    if (pers.getRut() != null) {
                        if (!pp.isEmpty()) {
                            if (!existeIdPers(pp, pers) && pers.getRut().contains(s)) {
                                pp.add(pers);
                            }
                        } else {
                            if (pers.getRut().contains(s)) {
                                pp.add(pers);
                            }
                        }
                    }
                    if (pers.getNombre() != null) {
                        if (!pp.isEmpty()) {
                            if (!existeIdPers(pp, pers) && pers.getNombre().contains(s)) {
                                pp.add(pers);
                            }
                        } else {
                            if (pers.getNombre().contains(s)) {
                                pp.add(pers);
                            }
                        }
                    }
                    if (pers.getApPaterno() != null) {
                        if (!pp.isEmpty()) {
                            if (!existeIdPers(pp, pers) && pers.getApPaterno().contains(s)) {
                                pp.add(pers);
                            }
                        } else {
                            if (pers.getApPaterno().contains(s)) {
                                pp.add(pers);
                            }
                        }
                    }
                    if (pers.getApMaterno() != null) {
                        if (!pp.isEmpty()) {
                            if (!existeIdPers(pp, pers) && pers.getApMaterno().contains(s)) {
                                pp.add(pers);
                            }
                        } else {
                            if (pers.getApMaterno().contains(s)) {
                                pp.add(pers);
                            }
                        }
                    }
                }
            }
            for (String s : palabras2) {
                for (SsfPersona pers : ppall) {
                    if (pers.getRut() != null) {
                        if (!pp.isEmpty()) {
                            if (!existeIdPers(pp, pers) && pers.getRut().contains(s)) {
                                pp.add(pers);
                            }
                        } else {
                            if (pers.getRut().contains(s)) {
                                pp.add(pers);
                            }
                        }
                    }
                }
            }
            if (!pp.isEmpty()) {
                tblPersona.removeAll();
                cargaPersonas(pp);
            } else {
                tfBuscar.setText("Búsqueda sin resultados");
                tblPersona.removeAll();
            }

        }
        
        
    }//GEN-LAST:event_bBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenedorPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenedorPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenedorPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenedorPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MantenedorPersona().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAgregar;
    private javax.swing.JButton bBuscar;
    private javax.swing.JButton bLimpiar;
    private javax.swing.JButton bModificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lError;
    private javax.swing.JLabel lExito;
    private javax.swing.JToggleButton tbEstado;
    private javax.swing.JTable tblPersona;
    private javax.swing.JTextField tfAp1;
    private javax.swing.JTextField tfAp2;
    private javax.swing.JTextField tfBuscar;
    private javax.swing.JTextField tfCorreo;
    private javax.swing.JTextField tfFechaNac;
    private javax.swing.JTextField tfNombre;
    private javax.swing.JTextField tfRut;
    private javax.swing.JTextField tfTelefono;
    // End of variables declaration//GEN-END:variables

    private static Logger log = Logger.getLogger(MantenedorPersona.class.getName());
    DefaultTableModel model;
    SsfPersonaBO pbo;
    
    private void cargaTabla() {
        borrarTabla();
        pbo = new SsfPersonaBO();
        List<SsfPersona> lp = pbo.getAllSP();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        String sfecha = null;
        for (SsfPersona p : lp) {
            
            if (p.getFechaNac() != null) {
                sfecha = sdf.format(p.getFechaNac());
            }
            model.addRow(new Object[]{p.getId(), p.getRut(), p.getNombre(), p.getApPaterno(), p.getApMaterno(), p.getCorreo(), p.getTelefono(), sfecha, sdf.format(p.getFechCreacion()), p.getEstado()});
        }
        tblPersona.setModel(model);

    }

    

    private void desactivarEstado() {
        tbEstado.setText("Desactivado");
        tbEstado.setBackground(new java.awt.Color(255, 51, 51));
    }

    private void activarEstado() {
        tbEstado.setText("Activo");
        tbEstado.setBackground(new java.awt.Color(0, 204, 102));
    }

    private void limpiarMsgs() {
        lExito.setText("");
        lError.setText("");
    }
    
    private boolean existeIdPers(List<SsfPersona> pp, SsfPersona pers) {
        for (SsfPersona p : pp) {
            if (p.getId() == pers.getId()) {
                return true;
            }
        }
        return false;
    }

    private void cargaPersonas(List<SsfPersona> pp) {
        borrarTabla();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        String sfecha = null;
        for (SsfPersona p : pp) {
            
            if (p.getFechaNac() != null) {
                sfecha = sdf.format(p.getFechaNac());
            }
            model.addRow(new Object[]{p.getId(), p.getRut(), p.getNombre(),
                p.getApPaterno(), p.getApMaterno(), p.getCorreo(), p.getTelefono(),
                sfecha, sdf.format(p.getFechCreacion()), p.getEstado()});
        }
        tblPersona.setModel(model);
    }

    private void borrarTabla() {
        tblPersona.removeAll();
        tblPersona.repaint();
        model = (DefaultTableModel) tblPersona.getModel();
        model.fireTableDataChanged();
        tblPersona.repaint();
        tblPersona.removeAll();
        int rows = model.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        
        tblPersona.removeAll();
        model.setRowCount(0);
        model.fireTableDataChanged();
        tblPersona.repaint();
        tblPersona.setModel(model);
        tblPersona.repaint();
        tblPersona.removeAll();
    }

}
